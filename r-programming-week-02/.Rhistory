library("swirl")
swirl()
?c
z
quit()
library("swirl")
swirl()
1
swirl()
z = 555
main()
z <- 555
c(z ,555, z)
quit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
head(flags)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class, simplify = TRUE)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags [, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
a
library(datasets)
data(iris)
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:], mean)
apply(iris[, 1:], 1, mean)
apply(iris[, 1:5], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
colMeans(iris)
colMeans(iris[,1:4])
data(mtcars)
>mtcars
?mtcars
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?split
split(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
>with
?with
with(mtcars, tapply(cyl, hp, mean))
with(mtcars, tapply(hp, cyl, mean))
debug(ls)
ls
ls()
1
2
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
clear()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
a
Q
a
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
undebug(ls)
undebug(ls)
undebug(ls)
undebug(ls)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector()
makeVector(1)
a <- makeVector(1:4)
a
a$get()
a
class(a)
a$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
cachemean(a)
setwd("D:/Private/R/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2,byrow=TRUE))
mat <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2,ncol=2,byrow=TRUE))
mat$get()
m$getinverse()
mat$getinverse()
cacheSolve(mat)
cacheSolve(mat)
mat$set(matrix(c(2,3,4,5), nrow=2,ncol=2,byrow=TRUE))
mat$get()
cacheSolve(mat)
cacheSolve(mat)
source("cachematrix.R")
