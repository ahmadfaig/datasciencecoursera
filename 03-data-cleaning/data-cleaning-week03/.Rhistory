library("swirl")
swirl()
?c
z
quit()
library("swirl")
swirl()
1
swirl()
z = 555
main()
z <- 555
c(z ,555, z)
quit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
library swirl
library(swirl)
swirl
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
>gather
?gather
submit()
?spread
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
students4
?select
submit()
?unique
submit()
submit()
passed
failed
?mutate
mutate(passed,status:"passed")
mutate(passed,"status":"passed")
mutate(passed,
status,"passed")
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
?group_by
submit()
submit()
submit()
housingData<-read.csv("./data/housingData.csv")
setwd("D:/Private/R/03-data-cleaning/data-cleaning-week03")
housingData<-read.csv("./data/housingData.csv")
head(housingData[housingData$ACR == 3 & housingData$AGS == 6])
head(housingData[housingData$ACR == 3 & housingData$AGS == 6])
head(housingData)
head(housingData[housingData$ACR == 3 & housingData$AGS == 6],)
head(housingData[(housingData$ACR == 3 & housingData$AGS == 6),])
agricultureLogical <- housingData[(housingData$ACR == 3 & housingData$AGS == 6),]
which(agricultureLogical)
?which
housingData$ACR == 3
agricultureLogical = housingData$ACR == 3 & housingData$AGS == 6
which(agricultureLogical)
source("quiz-01.R")
source("quiz-01.R")
source("quiz-01.R")
install package("jpeg")
install.package("jpeg")
install.packages("jpeg")
library(jpeg)
?readJPEG
img <- readJpeg(system.file("img", "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", package="jpeg"), TRUE)
img <- readJPEG(system.file("img", "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", package="jpeg"), TRUE)
img <- readJPEG(system.file("img", "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", package="jpeg"), TRUE)
img <- readJPEG(system.file("img", "jeff.jpg", package="jpeg"), TRUE)
img <- readJPEG(system.file("img", "jeff.jpg", package="jpeg"), TRUE)
?readJPEG
?system.file
img <- readJPEG(system.file("jeff.jpg", package="jpeg"), TRUE)
img <- readJPEG(system.file("jeff.jpg", package="jpg"), TRUE)
img <- readJPEG(system.file("jeff.jpg", package="jpeg"), TRUE)
?readJPEG
?system.file
img <- readJPEG(system.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", package="jpeg"), TRUE)
img <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", TRUE)
img <- readJPEG("D:\Private\R\03-data-cleaning\data-cleaning-week03\jeff.jpg", TRUE)
img <- readJPEG("D:/Private/R/03-data-cleaning/data-cleaning-week03/jeff.jpg", TRUE)
img
type
type(imge)
type(img)
img.type
class(img)
quantile(img, c(.3, .8))
source("quiz-03.R")
GDPData<-read.csv("./data/GDP.csv")
educationData<-read.csv("./data/education.csv")
names(GDPData)
names(educationData)
mergedData = merge(GDPData, educationData, by.x=x, by.y = "CountryCode",all=TRUE)
mergedData = merge(GDPData, educationData, by.x="x", by.y = "CountryCode",all=TRUE)
?merge
head(GDPData)
mergedData = merge(GDPData, educationData, by.x="X", by.y = "CountryCode",all=TRUE)
head(mergedData)
head(mergedData, 10)
head(mergedData, 20)
head(mergedData, 50)
head(mergedData$X, 50)
mergedData$Gross.domestic.product.2012
mergedData = merge(GDPData, educationData, by.x="X", by.y = "CountryCode",all=FALSE)
mergedData
mergedDataSort <- mergedData[order(Gdp$X3)]
mergedDataSort <- mergedData[order(X3)]
mergedDataSort <- mergedData[order(X.3)]
class(mergerd)
class(mergedData)
mergedDataSort <- mergedData[order(X.3)]
mergedData$X.3
mergedDataSort <- mergedData[order(mergedData$X.3)]
mergedDataSort <- mergedData[order(mergedData$X.3)]
mergedDataSort <- mergedData[order(mergedData$X.3),]
mergedDataSort$X.3
mergedDataSort
mergedDataSort$CountryCode
mergedDataSort$X.1
mergedDataSort$X.2
mergedDataSort$X.3
mergedDataSort$X.1
mergedData$X.1
mergedData
mergedData$X.1
mergedDataSort$X
mergedDataSort$Long.Name
mergedDataSort$X.2
mergedDataSort$X.3
?merge
mergedData <- merge(educationData,GDP[6:195,],all=FALSE)
mergedData <- merge(educationData,GDPData[6:195,],all=FALSE)
head(mergedData)
mergedData$X.3
mergedData <- merge(educationData,GDPData[6:195,],by.x = "CountryCode",by.y="X" all=FALSE)
mergedData <- merge(educationData,GDPData[6:195,],by.x = "CountryCode",by.y="X", all=FALSE)
mergedData$X.3
mergedData$X
mergedData$X.1
mergedData$CountryCode
mergedData$X.3
tail(mergedData)
head(mergedData)
head(mergedData[CountryCode == "USA",])
head(mergedData[mergedData$CountryCode == "USA",])
head(mergedData[mergedData$CountryCode == "CHN",])
GDPData[6:195,]
mergedData <- merge(educationData,GDPData[5:194,],by.x = "CountryCode",by.y="X", all=FALSE)
typeof(mergedData$X.3)
mergedDataSort <- mergedData[order(mergedData$X.3),]
mergedDataSort$X.3
typeof(mergedDataSort$X.3)
mergedDataSort <- mergedData[order(as.numeric(mergedData$X.3)),]
mergedDataSort$X.3
typeof(mergedData)
class(mergedData)
class(mergedData$X.3)
typeof(mergedData$X.3)
typeof(mergedData$X)
typeof(mergedData$X.1)
typeof(mergedData$X.2)
typeof(mergedData$CountryCode)
class(mergedData$CountryCode)
class(as.numeric(as.character(mergedData$CountryCode)))
class(mergedData)
class(mergedData$X.3)
class(as.numeric(mergedData$X.3))
mergedDataSort <- mergedData[order(as.numeric(mergedData$X.3)),]
mergedDataSort$X.3
as.numeric(mergedDataSort$X.3)
as.numeric(as.character(mergedDataSort$X.3))
?gsub
as.numeric(gsub(",","",mergedDataSort$X.3))
mergedDataSort <- mergedData[order(as.numeric(gsub(",","",mergedDataSort$X.3))),]
mergedDataSort$X.3
as.numeric(gsub(",","",mergedDataSort$X.3))
as.numeric(gsub(",","",mergedData$X.3))
mergedData$X.3
mergedData <- merge(educationData,GDPData[5:194,],by.x = "CountryCode",by.y="X", all=FALSE)
mergedData$X.3
mergedDataSort <- mergedData[order(as.numeric(gsub(",","",mergedData$X.3))),]
mergedDataSort$X.3
mergedDataSort$Long.Name
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD"]
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$X.3
mergedDataSort$ranking = seq.int(nrow(mergedDataSort))
mergedDataSort$ranking
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$ranking
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$ranking)
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]$ranking)
mergerDataSort2 = mergedData[order(as.numeric(gsub(",","",mergedData$X.3)))-,]
mergerDataSort2 = mergedData[order(as.numeric(gsub(",","",mergedData$X.3))-),]
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$X.2)
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",])
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$X.2)
mean(mergedDataSort$X.2)
mergedDataSort$X.2
mergedDataSort$X.1
mergedDataSort$Gross.domestic.product.2012
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$$Gross.domestic.product.2012)
mean(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$Gross.domestic.product.2012)
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]
mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$Gross.domestic.product.2012
class(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$Gross.domestic.product.2012)
mean(as.numeric(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$Gross.domestic.product.2012))
mean(as.numeric(mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]$Gross.domestic.product.2012))
mergedDataSort$Income.Group=="High income: OECD"
mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]
mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]$Gross.domestic.product.2012
as.numeric(mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]$Gross.domestic.product.2012)
as.numeric(as.character(mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]$Gross.domestic.product.2012))
mean(as.numeric(as.character(mergedDataSort[mergedDataSort$Income.Group=="High income: OECD",]$Gross.domestic.product.2012)))
mean(as.numeric(as.character(mergedDataSort[mergedDataSort$Income.Group=="High income: nonOECD",]$Gross.domestic.product.2012)))
?cut
